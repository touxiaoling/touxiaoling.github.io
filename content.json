{"meta":{"title":"tomin的个人博客","subtitle":"从输入到输出","description":"不要再拖延啦!","author":"tomin","url":"https://blog.thetomin.com","root":"/"},"pages":[{"title":"about","date":"2022-05-11T20:46:58.000Z","updated":"2022-10-07T07:06:26.423Z","comments":true,"path":"about/index.html","permalink":"https://blog.thetomin.com/about/index.html","excerpt":"","text":""},{"title":"categories","date":"2022-05-11T21:12:03.000Z","updated":"2022-10-07T07:06:26.423Z","comments":true,"path":"categories/index.html","permalink":"https://blog.thetomin.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2022-05-11T20:47:13.000Z","updated":"2022-10-07T07:06:26.423Z","comments":true,"path":"tags/index.html","permalink":"https://blog.thetomin.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"从黑群晖到TrueNAS SCALE","slug":"从黑群晖到truenas-scale","date":"2022-06-02T03:09:34.000Z","updated":"2022-10-07T07:06:26.423Z","comments":true,"path":"posts/8a7ae7d7.html","link":"","permalink":"https://blog.thetomin.com/posts/8a7ae7d7.html","excerpt":"前言回忆一下也是有几年了,最开始入坑NAS还是因为星际蜗牛,当时蜗牛矿渣大批量上市,一个机箱只要200左右,刚好当时有两块从笔记本还有PC淘汰下来的硬盘(2T),抱着折腾的心态直接入了两台,一台实验测试最佳实践,一台折腾最新特性.玩了有一年后,又奔着all in one的坑,自己配了一个性能强一点的.硬盘没插几块,也没什么存数据的刚需,但是这NAS家里都堆了三台了(苦笑).这三台NAS一开始都是用的黑群晖,黑群晖的一个优点应该是ui界面比较人性直观,适合小白使用;但是,因为是盗版系统,安全更新是一个大问题,大版本更新的每次跟进都要扒层皮.这对我这种喜欢跟进最新特性的人简直是折磨.另外硬件适配也是针对性的,我用的cpu和主板都较新,不知道哪里不兼容,硬盘不能启用休眠,一休眠就挂.虽然早就想迁移,但群晖的文件系统是私有格式,直接转移硬盘到另一个NAS或者别的系统都是没办法识别数据的.所以看里面已经住了那么多漂亮小姐姐的份上,我也就睁一眼闭一眼.但是这两天开始,那台自配的8盘位NAS开始掉盘了,看了上一篇文章的同学应该知道,我在上面搭建了rss服务,这下连新闻都不能看了.当作一个低成本家庭all in one小服务器用的NAS彻底失去了它的价值,狠狠心,里面的小姐姐都不要了!我要换家!!!","text":"前言回忆一下也是有几年了,最开始入坑NAS还是因为星际蜗牛,当时蜗牛矿渣大批量上市,一个机箱只要200左右,刚好当时有两块从笔记本还有PC淘汰下来的硬盘(2T),抱着折腾的心态直接入了两台,一台实验测试最佳实践,一台折腾最新特性.玩了有一年后,又奔着all in one的坑,自己配了一个性能强一点的.硬盘没插几块,也没什么存数据的刚需,但是这NAS家里都堆了三台了(苦笑).这三台NAS一开始都是用的黑群晖,黑群晖的一个优点应该是ui界面比较人性直观,适合小白使用;但是,因为是盗版系统,安全更新是一个大问题,大版本更新的每次跟进都要扒层皮.这对我这种喜欢跟进最新特性的人简直是折磨.另外硬件适配也是针对性的,我用的cpu和主板都较新,不知道哪里不兼容,硬盘不能启用休眠,一休眠就挂.虽然早就想迁移,但群晖的文件系统是私有格式,直接转移硬盘到另一个NAS或者别的系统都是没办法识别数据的.所以看里面已经住了那么多漂亮小姐姐的份上,我也就睁一眼闭一眼.但是这两天开始,那台自配的8盘位NAS开始掉盘了,看了上一篇文章的同学应该知道,我在上面搭建了rss服务,这下连新闻都不能看了.当作一个低成本家庭all in one小服务器用的NAS彻底失去了它的价值,狠狠心,里面的小姐姐都不要了!我要换家!!! 硬件说明8盘的万由机箱,cpu是intel 10600T,162+82 2666MHz DDR4内存,技嘉小雕(B460M AORUS PRO)主板.主板上是6口sata,所以又加了一块sata3.0 4口拓展卡凑出来8口.电源是买机箱的时候送的益衡300W模块.整机功耗100W左右,应该是妥妥的够了.待机功耗在80W. 关于RAIDNAS系统有一个重要的地方就是他的raid功能,但这更多的是一个企业功能,但是我个人的看法,家庭用户是没有必要使用raid的.一是增加存储成本,使用raid必然至少要占用一或多块体积最大的盘,这一块盘拿出来用于存放数据不好吗?二是riad5看似美好,但如果购买的是同一批次的磁盘,在同一时间损坏的概率很高,性价比最高的raid5恢复的计算需要对磁盘进行全盘读取,对家用磁盘来说这时候很有可能另一块也坏了.三是riad本身是为高可用服务的,如果你有24小时上线的业务,磁盘损坏导致的业务损失可能远远超出单块磁盘,这时候通过一些磁盘冗余,减小出问题的概率还是非常有必要的.但对于家庭用户,估计没什么不能断掉的服务在跑吧,可能屋里每过几个月都会不定时停一次电,这种高可用几乎是没啥必要的.四是增加维护复杂性,组raid以后,几块磁盘就绑定了,迁移的时候要一起迁移,有一块坏了,这些磁盘上的所有内容在进行校验恢复前都没办法继续使用.磁盘写入速度非常大比例的受到写入速度最慢的那块磁盘影响,对于使用多种大小和厂家的磁盘的家庭用户来说,组raid不一定会带来多大的写入上升,甚至还可能因为单块磁盘问题导致整个存储池速度严重变慢.组raid会减少数据丢失的概率,但会依照磁盘数量成倍的上升存储池出问题的概率.五是不方便扩展,组建raid通常是推荐一次到位,而且所有磁盘体积最好一致,但是对于可能nas上都是淘汰下来的像我这种半垃圾佬,组raid就会导致很大的空间浪费.六是SMART,现代的磁盘都已经支持SMART检测,快损坏的磁盘大部分都会现在SMART检测上出现预警,这时候做好迁移就好了.只要维护的好,没必要使用RAID来进行事后补偿.七是丢了又怎么样,重要数据做好多处备份后,不能恢复的数据可能还没一块硬盘值钱哈哈哈哈哈,比如一些虚拟机的历史快照之类的,大不了重新下载和配置喽.综合以上看法,我个人更倾向单盘单存储池的玩法.重要数据做好异地部分而不是使用raid. NAS系统选择nas常见的,大家了解最多的就是群晖和威联通了,这两家都是闭源系统.实际上用了这两年下来,他们的软件服务基本上也都没用上,都是我自己写的脚本,刚需其实就是docker,简单说装个ubuntu然后再装个docker就可以满足了.但怎么说,尊重未知,专业的nas系统自然有其优先的地方,有时候进去才会发现自己需求更方便和稳定的实现方式,这也是个人不断折腾的原因之一吧.除了功能外,系统也最好是开源的,磁盘最好是开源或者通用的格式,不然基本上就和这系统强绑定了,N年以后如果想要迁移就非常的麻烦,已经吃过一次亏自然不想第二次.在这种情况下,系统就是UNRaid和TrueNAS二选一了.unraid很适合家庭用户一把梭,折腾起来也很方便,raid方式也很有特点,单盘冗余备份,只占用空间最大的一块磁盘,后面可以非常简单的对磁盘池进行加减.拥有很多社区插件以及docker支持,但是论坛用户普遍反映unraid的读写速度是个问题,相比其他系统是要慢很多,没用nvme缓存的时候可能写入速度之后50~60MB&#x2F;s.另外unraid是闭源系统,个人对其功能维护还有理念的持续性保持一定程度的怀疑.另外unraid大家普遍反映稳定性不佳,对被黑群晖的宕机恶心的这么久的我来说,系统的稳定性还是挺重要的.相对比的话TrueNAS是开源系统, 本身是为企业NAS服务的,稳定性较好,但缺点就是不直接支持docker的.不过我去官网的时候发现,它们出了一个truenas scale支持docker,而且去年10月已经release了.这不刚好就是一切成熟,一阵愉悦之下我决定就使用TrueNAS SCALE 作为之后几年的个人NAS存储系统. TrueNas SCALE安装不同的NAS系统的安装方式都是略有区别,比如群晖是在每个系统盘上都会安装一个系统,而TrueNAS要求配置单块32g 以上磁盘(HDD or SSD)当作系统盘.注意这块盘就只能做系统不能存数据.做盘比较简单,在官网下载好TrueNAS镜像之后,可以使用balenaEtcher刻录到u盘上,然后插入NAS中,选择U盘启动即可进入安装界面.注意就是系统盘不能再存放数据了.以及因为会不断的写入日志到系统盘,所以官方不再推荐使用一般的U盘安装系统,它们本不是用于频繁写入的,这么玩的寿命通常只能撑半年到一年左右.但是sata口我刚好比较缺,本身8盘就已经用了主板上4个口加上一个4口的sata拓展卡.还有2个m.2接口,还等待以后升级配置的时候用970填上.所以,这里选择使用一个64GB的固态u盘作为系统盘,寿命应该用个3~4年不成问题吧.进入安装界面后等进度条走完,系统就安装好了,TrueNAS SCALE 基于debain,熟悉的朋友对TrueNAS SCALE的命令行应该也是很熟悉.所有的磁盘都挂载在/mnt 目录下.另外有一点要注意的是,基本上不通过GUI的操作都会在系统重启后被还原.这和TrueNAS的定位有关,基本上它把自己当作一个纯粹的企业NAS存储方案提供商,所以不希望用户做太多的自定义操作引入奇奇怪怪的问题.这里拿苹果当例子应该就很好理解了.刚刚的系统盘不能安装数据也是这种理念的体现,要么尊重最佳实践,要么去使用别的系统折腾吧. 功能配置docker-cmpose 安装安装好之后就是把之前黑群晖上的服务再重新在TrueNAS上搭建起来.索性个人使用的服务基本上都是通过docker-compose来启动管理的.那接下只要先装好docker-compose就好了.但装好才发现TrueNAS内置了docker,但是却不直接支持docker compsoe,因为TrueNAS使用k3s进行容器编排,作为同样的容器编排工具,docker compose自然与之冲突.去论坛上可以看到与此相关的好多争论,更专业的运维人员希望使用k8s完成更完整的编排,而普通用户又希望使用docker-compose进行简单的部署,但不管如何,k3s不是一个大多数人能接受的方案.在较早的帖子里,大家通常是通过先新建一个虚拟机,然后再在虚拟机里安装docker的方式来解决,不过我们选择TrueNAS SCALE本来就是因为其内置的docker,再新建虚拟机真是非常的不优雅.好在社区倒是提出了一个更好的方式–通过docker in docker技术,使得我们可以建立一个docker-compose容器,然后在该容器内使用docker-compsoe去运行其他容器,这样就能和k3s的编排隔离开来.而且使用中也暂时没发现什么坑.可以说非常完美了.首先添加社区源,这里po一下社区源的文档,上面有很多第三方包,不过我们在意的其实只有docker-compose.一键安装好后,进入命令行运行docker compose命令即可发现现在docker-compose已经成功安装在容器内了,然后就按平常的方式启动docker-compose即可. SMB共享共享额度限制ACL权限同一个文件夹如果想要共享给多个用户的话就要设置ACL权限了. MAC TimeMachine设置配置mac timemachine的方式比较复杂一些,首先 NAS优化NVME磁盘的用途众所周知啊,企业盘虽然容量很大,但是读写很吵,而且家用小服务器会常驻一些服务,比如 bt下载 homeassistant rss等等,这些服务会频繁的小幅度读写磁盘,如果数据库放在hdd企业盘里,那炒豆子的声音就断不了,而且nvme磁盘的小文件随机读写速度要比hdd磁盘高几个量级,从此考虑,常用的热数据,服务等等都放在nvme盘里,hdd盘放一些不经常读取又占空间的大文件,比如电影啊等等. 硬盘休眠和电源设置的说明启动时nas的待机功率在70w,还是比较高的,拔掉8块hdd硬盘后的功率是25w,所以磁盘大概耗掉了45w,还是很高的.那家用存储其实硬盘休眠就非常必要了.一块企业盘的耗电大概是5~8w,按5w算8块就是40w,一个月就是402430&#x2F;1000&#x3D;28.8度.商用电的价格是1度&#x2F;元,大概一年就是350块钱…浪费的电力也是很可观了,这多余的电费钱都能买个百度云盘的年费了.但我其实没有这么多的热数据要存,目前8块中7块都是空盘,也是非常过度投资了.按上文的规划,其实这些盘也不会存热数据,基本上都是万年不会看一次的电影之类的东西.在truenas上 问题磁盘每5分钟读取一次使用netdata查看历史数据的时候发现磁盘被每五分钟读取一次,不管有没有新建存储池都一样,如图:这问题很奇怪,SMART的检测时间是30minutes,所以应该不是SMART检测的问题.不过这个倒没有导致硬盘被频繁唤醒,所以就不管了. 安装NVME之后开始每几小时宕机一次在安装了一块从京东购买的970 evo plus 1T后.突然出现系统开始每几小时宕机一次,在系统里也查不到问题日志.鉴于我把系统数据收集池也移到了该块磁盘上,所以判断问题应该是这块磁盘上.所以,拆机检查发现,这个nvme的长度是插在了11cm的m.2槽上,但是没有用m2螺丝固定,应该是因为此导致了打滑或者信号传输error.重新插拔之后,正在观察问题,如果问题依旧复现,更换系统数据收集池到其他磁盘上,看是否能收到错误日志.以及从淘宝下单了一个m2固定螺丝,等待送达之后安装上再看看.–后记,果然是固定的问题,装上螺丝后就再也没重启过了,已经稳定运行几个月了. 后记也是所谓的折腾,真要说的话,家用没有那么大的带宽,机器运行的费用其实也打不平云服务器,比如这台每月电费是30块,8块磁盘大概有1.5w了,主机cpu主板机箱内存应该是6000左右,有2w我可以在阿里云上买一台超高性能的云计算机器了,稳定和可靠程度要吊打家用服务器. 不过,也就是cpu性能了,去查了下10t存储的阿里云三年要7w,还是高性能实例,还没有算上带宽费用,家庭用云服务器还不是那么可靠hhh…不过希望随着带宽的发展,以后都像企业那样,个人只用瘦终端,然后计算上云,用多少花多少钱,这样就能省很多钱,而且减少很多浪费,而且也可以随时更换硬件升级.不致于像现在这样这么折腾.","categories":[],"tags":[{"name":"群晖","slug":"群晖","permalink":"https://blog.thetomin.com/tags/%E7%BE%A4%E6%99%96/"},{"name":"TrueNAS SCALE","slug":"TrueNAS-SCALE","permalink":"https://blog.thetomin.com/tags/TrueNAS-SCALE/"}]},{"title":"在群晖中使用docker搭建TTRSS+RSSHub并启用https","slug":"TTRSS搭建","date":"2022-05-13T09:45:54.000Z","updated":"2022-10-07T07:06:26.423Z","comments":true,"path":"posts/37149971.html","link":"","permalink":"https://blog.thetomin.com/posts/37149971.html","excerpt":"前言目前个人获取信息的方式十分的平台化,而每个平台基本上又都是以使用时间为条件给你推荐各种东西,比如奶子啊奶子啊还有奶子啊什么的,搞得我身体很不好.开玩笑,rss可以让我们主动从各个平台获取信息而不被绑架自己的视野,这非常有用.比如b站不会给你推荐抖音上的东西,抖音也不会给你推荐其他平台上的东西,其他平台还有v2ex,知乎,微博,大家因为常用平台不一样看到的东西也非常的不一样.但是跨平台的浏览不得不说又十分的麻烦.还有就是不同平台的排行榜都是处于自己利益定制的,另外还有一些不能在国内轻易访问的网站(非情色).还有就是像孤岛一样的半年不更新一次的个人博客,这种就更难主动去访问了,如果想抓取不同平台的热门内容还有你想关注的内容汇总到一起,RSS就是一个非常棒的一站式工具.当然,只是收集强时间相关的信息上来说.不过很尴尬的是,目前并没有一个可以说特别好用的RSS平台,TTRSS相对来说是比较不错的一个,但用了一阵以后发现启动速度相对来说还是比较慢.嘛,怎么说,只能交给时间解决了.","text":"前言目前个人获取信息的方式十分的平台化,而每个平台基本上又都是以使用时间为条件给你推荐各种东西,比如奶子啊奶子啊还有奶子啊什么的,搞得我身体很不好.开玩笑,rss可以让我们主动从各个平台获取信息而不被绑架自己的视野,这非常有用.比如b站不会给你推荐抖音上的东西,抖音也不会给你推荐其他平台上的东西,其他平台还有v2ex,知乎,微博,大家因为常用平台不一样看到的东西也非常的不一样.但是跨平台的浏览不得不说又十分的麻烦.还有就是不同平台的排行榜都是处于自己利益定制的,另外还有一些不能在国内轻易访问的网站(非情色).还有就是像孤岛一样的半年不更新一次的个人博客,这种就更难主动去访问了,如果想抓取不同平台的热门内容还有你想关注的内容汇总到一起,RSS就是一个非常棒的一站式工具.当然,只是收集强时间相关的信息上来说.不过很尴尬的是,目前并没有一个可以说特别好用的RSS平台,TTRSS相对来说是比较不错的一个,但用了一阵以后发现启动速度相对来说还是比较慢.嘛,怎么说,只能交给时间解决了. 前置知识前置需要了解一些关于docker以及docker-compose的基本知识和基本命令.docker在群晖的安装很简单,只要在套件库里面搜索docker然后安装上就可以了.其它系统的安装见官方页:https://docs.docker.com/get-docker/我是在自己的黑群晖小机器里搭建的.docker版本是20.10.3,docker-compose 版本是1.28.5,注意docker-compose版本最好大于1.17,不然会有点bug. 搭建ttrsss新建一个名叫ttrss的文件夹,然后在里面新建一个名叫docker-compose.yml的文件. 123mkdir ttrsscd ttrsstouch docker-compose.yml 然后在该文件中写入如下内容: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768services: service.rss: image: wangqiru/ttrss:latest container_name: ttrss labels: com.centurylinklabs.watchtower.enable: true environment: SELF_URL_PATH: http://机器ip:31480 # please change to your own domain DB_PASS: ttrss # use the same password defined in `database.postgres` PUID: 1026 PGID: 100 ports: - 31480:80 volumes: - feed-icons:/var/www/feed-icons/ networks: - public_access - service_only - database_only stdin_open: true tty: true depends_on: - service.mercury - service.opencc - database.postgres restart: always service.mercury: # set Mercury Parser API endpoint to `service.mercury:3000` on TTRSS plugin setting page image: wangqiru/mercury-parser-api:latest labels: com.centurylinklabs.watchtower.enable: true networks: - public_access - service_only restart: always service.opencc: # set OpenCC API endpoint to `service.opencc:3000` on TTRSS plugin setting page image: wangqiru/opencc-api-server:latest labels: com.centurylinklabs.watchtower.enable: true environment: NODE_ENV: production networks: - service_only restart: always database.postgres: image: postgres:13-alpine labels: com.centurylinklabs.watchtower.enable: true environment: - POSTGRES_PASSWORD=ttrss # feel free to change the password volumes: - postgres-data:/var/lib/postgresql/data # persist postgres data to ~/postgres/data/ on the host networks: - database_only restart: alwaysvolumes: feed-icons: postgres-data:networks: public_access: # Provide the access for ttrss UI service_only: # Provide the communication network between services only internal: true database_only: # Provide the communication between ttrss and database only internal: true 注意,SELF_URL_PATH 处要填写你启动docker机器的ip,PUID和PGID是docker容器的用户id和组id,这个如果填错了好像也不会怎么样,只要你是用的创建的虚拟卷.在命令行使用docker-compose up -d启动docker-compose容器.然后在浏览器中访问 http:&#x2F;&#x2F;机器ip:31480 就可以看到你的ttrss网站了. 搭建rsshubrsshub的官方网站是: https://docs.rsshub.app/ , 可以给各种各样的网站生成rss订阅源.帮助我们实现跨平台订阅的想法.你可以直接使用在线的rsshub订阅源来访问一些反爬不是特别严格的网站,但某些反爬严格比如微博某个博主的更新,就最好是自建RSSHub服务了.不过搭建也很简单,我们直接在刚才的docker-compose.yml文件中增加一些关于rsshub的内容即可. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108services: service.rss: image: wangqiru/ttrss:latest container_name: ttrss labels: com.centurylinklabs.watchtower.enable: true environment: SELF_URL_PATH: http://机器ip:31480 # please change to your own domain DB_PASS: ttrss # use the same password defined in `database.postgres` PUID: 1026 PGID: 100 ports: - 31480:80 volumes: - feed-icons:/var/www/feed-icons/ networks: - public_access - service_only - database_only stdin_open: true tty: true depends_on: - rsshub - service.mercury - service.opencc - database.postgres restart: always service.mercury: # set Mercury Parser API endpoint to `service.mercury:3000` on TTRSS plugin setting page image: wangqiru/mercury-parser-api:latest labels: com.centurylinklabs.watchtower.enable: true networks: - public_access - service_only restart: always service.opencc: # set OpenCC API endpoint to `service.opencc:3000` on TTRSS plugin setting page image: wangqiru/opencc-api-server:latest labels: com.centurylinklabs.watchtower.enable: true environment: NODE_ENV: production networks: - service_only restart: always rsshub: image: diygod/rsshub restart: always labels: com.centurylinklabs.watchtower.enable: true environment: PORT: 80 NODE_ENV: production CACHE_TYPE: redis REDIS_URL: &#x27;redis://database.redis:6379/&#x27; PUPPETEER_WS_ENDPOINT: &#x27;ws://service.browserless:3000&#x27; networks: - public_access - database_only depends_on: - database.redis - service.browserless service.browserless: image: browserless/chrome labels: com.centurylinklabs.watchtower.enable: true restart: always ulimits: core: hard: 0 soft: 0 database.redis: image: redis:alpine restart: always labels: com.centurylinklabs.watchtower.enable: true volumes: - redis-data:/data networks: - database_only database.postgres: image: postgres:13-alpine labels: com.centurylinklabs.watchtower.enable: true environment: - POSTGRES_PASSWORD=ttrss # feel free to change the password volumes: - postgres-data:/var/lib/postgresql/data # persist postgres data to ~/postgres/data/ on the host networks: - database_only restart: alwaysvolumes: feed-icons: redis-data: postgres-data:networks: public_access: # Provide the access for ttrss UI service_only: # Provide the communication network between services only internal: true database_only: # Provide the communication between ttrss and database only internal: true 然后运行docker-compose up -d即可.因为都在同一个compose文件,也在同一个public_access网络下,所以ttrss可以使用rsshub做域名直接解析到rsshub的ip.想要在ttrss中订阅rsshub的链接,比如b站番剧就是 http://rsshub/bilibili/bangumi/media/9192更详细的文档可以看https://docs.rsshub.app/ 配置watchtower自动更新如果使用本地的RSSHub服务,有一个小问题是它经常更新…,如果手动来的话会很麻烦,所以我们可以使用watchtower来监控他们进行自动更新.我们再新建一个叫watchtower的文件夹,然后在里面再创建一个docker-compose.yml文件 123mkdir rsshubcd rsshubtouch docker-compose.yml 然后在里面写如下内容: 12345678910111213version: &quot;3.8&quot;services: watchtower: image: containrrr/watchtower:latest container_name: watchtower restart: always environment: TZ: Asia/Shanghai WATCHTOWER_LABEL_ENABLE: &quot;true&quot; WATCHTOWER_CLEANUP: &quot;true&quot; WATCHTOWER_SCHEDULE: &quot;0 30 4 * * *&quot; volumes: - /var/run/docker.sock:/var/run/docker.sock 然后运行docker-compose up -d即可启动一个wathtower容器,它会在每天4.30检测并更新容器.如果不经过一些其他特殊配置,watchtower容器一个宿主机只能运行一个,多个会相互冲突.不过一般来说一个就足够了.如果你还有其他docker container 在运行也希望一并检测的话,给对应的容器增加一个com.centurylinklabs.watchtower.enable: true的label即可. 启用https访问ttrss默认是使用http访问的,而现在的chrome浏览器不建议http访问,所以我们可以申请一个https证书,使用nginx将http转成https再访问ttrss.如果要启用https,首先我们需要一个个人域名,在国内买的话需要备案,如果不想要备案的话也可以在一些国外的比如godaddy上注册一个域名.价格应该不会特别贵.如果实在不想买的话就要考虑一些骚操作,不过我还是建议花钱买省心.有一个个人域名会方便很多. 创建acme.sh容器下面我就假设你已经有个一个域名,接下来就是神奇一个https证书.证书的申请可以使用acme.sh,这个是一个自动申请免费证书的工具,还可以检测快到期自动重新申请.我们再新建一个叫acme.sh的文件夹,然后在里面再创建一个docker-compose.yml文件和一个名叫out的文件夹. 1234mkdir acme.shcd acme.shmkdir outtouch docker-compose.yml 然后在里面写如下内容: 12345678910111213141516version: &quot;3.8&quot;services: acme.sh: image: neilpang/acme.sh:latest container_name: acme.sh restart: always labels: com.centurylinklabs.watchtower.enable: true environment: GD_Secret: MYSELF_PRIVETE_SECRET GD_Key: MYSELF_PRIVETE_KEY volumes: - /var/run/docker.sock:/var/run/docker.sock - ./out:/acme.sh command: daemon 因为我是在godaddy上申请的,所以申请证书就需要填入这里的GD_Secret 和GD_Key两个内容.这两个值可以在godaddy的开发者网站上申请.网址是: https:&#x2F;&#x2F;这里有一个网址等待补全.com&#x2F;使用docker-compose up -d即可启动acme.sh容器,它会在后台检测你已经申请的证书是否到期并续期. 申请https证书然后注册一个账号 1sudo docker exec acme.sh --register-account -m youremail@mail.com 注意youremail@mail.com是填你自己的邮箱地址.然后敲下面的命令开始申请证书,注意yourdomain.com是填你要申请证书的域名,请确保这个域名你自己是拥有者. 1sudo docker exec acme.sh --issue --dns dns_gd -d yourdomain.com 这个命令会申请一个证书,并且把它保存到/acme.sh/out/yourdomain.com目录下.不过我们不会直接操作out目录下的内容.也不会去手动copy它,这样他不会自动更新. 创建nginx容器接下来我们创建一个nginx容器.在ttrss的docker-compose.yml文件中,我们增加一些内容: 1等待补全 导入https证书到ngnix在路由器配置DNS域名劫持在路由器设置域名DNS解析劫持. 暴露TTRSS到公网访问这样我们就可以在本地的局域网愉快的使用ttrss了.不过如果出门怎么办呢,rss非常适合在坐地铁的使用使用不是吗?只能在家用也太不方便了.所以我们要将tttrss暴露到公网,前一步的启用https也是为了增加暴漏到公网的安全性.这一步我们需要有一个固定的公网ip地址,或者DDNS,不过家用ip启动web服务是违法的,如果不备案的话我推荐是购买一个云服务器(国外),以及国外域名,这样会省很多事,不然还是乖乖备案叭.","categories":[],"tags":[{"name":"TTRSS","slug":"TTRSS","permalink":"https://blog.thetomin.com/tags/TTRSS/"},{"name":"docker","slug":"docker","permalink":"https://blog.thetomin.com/tags/docker/"},{"name":"RSSHub","slug":"RSSHub","permalink":"https://blog.thetomin.com/tags/RSSHub/"},{"name":"Nginx","slug":"Nginx","permalink":"https://blog.thetomin.com/tags/Nginx/"},{"name":"frp","slug":"frp","permalink":"https://blog.thetomin.com/tags/frp/"},{"name":"https","slug":"https","permalink":"https://blog.thetomin.com/tags/https/"},{"name":"群晖","slug":"群晖","permalink":"https://blog.thetomin.com/tags/%E7%BE%A4%E6%99%96/"},{"name":"watchtower","slug":"watchtower","permalink":"https://blog.thetomin.com/tags/watchtower/"}]},{"title":"你好-世界","slug":"你好-世界","date":"2022-05-11T21:57:09.000Z","updated":"2022-10-07T07:06:26.423Z","comments":true,"path":"posts/97d578eb.html","link":"","permalink":"https://blog.thetomin.com/posts/97d578eb.html","excerpt":"前言一直以来都想搭建一个博客,但是又觉的维护起来很麻烦.比如需要要服务器,需要个人域名,域名证书,网站备案等等.或者就是放在第三方博客平台上,但是发表的文章导出很麻烦,格式不够自由还要经过各种各样的审查和屏蔽.另外就是一个个人博客通常来说大部分人的都没有什么访问,缺少引流方式和个人独特性的时候,这博客基本上就自己访问简直就是自闭.自己大部分时候又是一个潜水党.种种评估下来,搭建个人博客的事情就一直搁置中.不过,时间是一个很好的东西,几年下来发现个人域名,服务器什么也都有了,在做一些个人小爱好的时候发现网上的资料也不是完全足够,免不了还是要自己踩一些小坑.这里的坑部分是因为自己的水平跟不上文章的作者,部分是因为某些工具或者框架迭代导致的过时.然后突然发现,那我也是可以写一些东西让其他人,或者同水平的朋友少踩坑的,建立博客的意义就有了. 最近在浏览其他网友的博文的时候发现有不少网友使用了hexo的框架,大致检索了下发现十分轻便,博文可以直接markdown语法,非常简单.初期可以直接搭建在github page上,启动成本很低.如果真的不错也,出于网络问题可以再迁移到国内的个人服务器上,又因为是markdown语法,跨框架迁移起来也很方便,再加上最近确实很闲,这让我动了实际搭建一个博客的行动理由.从这里大抵可以看出我是一个想的挺多不怎么愿意动手的人,因为重复折腾真的会让人回忆起来觉的很浪费生命,那这样还不如花费在一些直接收获快乐的垃圾事情上,没错,我说的就是打游戏.","text":"前言一直以来都想搭建一个博客,但是又觉的维护起来很麻烦.比如需要要服务器,需要个人域名,域名证书,网站备案等等.或者就是放在第三方博客平台上,但是发表的文章导出很麻烦,格式不够自由还要经过各种各样的审查和屏蔽.另外就是一个个人博客通常来说大部分人的都没有什么访问,缺少引流方式和个人独特性的时候,这博客基本上就自己访问简直就是自闭.自己大部分时候又是一个潜水党.种种评估下来,搭建个人博客的事情就一直搁置中.不过,时间是一个很好的东西,几年下来发现个人域名,服务器什么也都有了,在做一些个人小爱好的时候发现网上的资料也不是完全足够,免不了还是要自己踩一些小坑.这里的坑部分是因为自己的水平跟不上文章的作者,部分是因为某些工具或者框架迭代导致的过时.然后突然发现,那我也是可以写一些东西让其他人,或者同水平的朋友少踩坑的,建立博客的意义就有了. 最近在浏览其他网友的博文的时候发现有不少网友使用了hexo的框架,大致检索了下发现十分轻便,博文可以直接markdown语法,非常简单.初期可以直接搭建在github page上,启动成本很低.如果真的不错也,出于网络问题可以再迁移到国内的个人服务器上,又因为是markdown语法,跨框架迁移起来也很方便,再加上最近确实很闲,这让我动了实际搭建一个博客的行动理由.从这里大抵可以看出我是一个想的挺多不怎么愿意动手的人,因为重复折腾真的会让人回忆起来觉的很浪费生命,那这样还不如花费在一些直接收获快乐的垃圾事情上,没错,我说的就是打游戏. 搭建搭建很简单,需要一点点前端的知识,不了解的话就大致百度下应该就ok.然后照着命令敲就行了,我参考了https://tding.top/archives/7f189df5.htmlhttps://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html这两位的内容,可以实现一个博客的搭建.hexo new &quot;title-name&quot; 可以创建一个新的博客文章,然后写就完事了.注意hexo s会启动一个服务器方面本地预览,修改内容后直接F5刷新即可,不需要提前运行hexo g编译静态页面,因为会自动编译.自动部署和手动部署都要求先提前设置好_config.yml内的deploy相关配置.比如我要把编译的静态页面内容放到同仓库的gh-pages分支,就按照配置成下面的样子即可. 123456# Deployment## Docs: https://hexo.io/docs/one-command-deploymentdeploy: type: &#x27;git&#x27; repository: https://github.com/touxiaoling/touxiaoling.github.io.git # 用https或者ssh均可 branch: gh-pages 折腾再往后的折腾就是自动编译,域名自定义,theme切换,更换到个人服务器上(不过毕竟本人也不是运维.对于个人服务器的安全和稳定性其实一直都没谱),家里的nas跑了一些服务基本上一个月停电断网什么的都会有一次,感觉也不是多稳定.所以如果没有更简单的方式,也没有特别的需求可能还是会一直在github page上. 显示rss订阅参考: https://juejin.cn/post/7012255009593098254在_config.yml里添加下面的内容即可: 123456789101112plugins: hexo-generate-feed​# rss配置feed: type: atom path: atom.xml limit: 20 hub: content: content_limit: 140 content_limit_delim: &#x27; &#x27; order_by: -date 更换主题主题更换到next,链接是: https://github.com/theme-next/hexo-theme-next推荐使用npm安装,这样后面切换github action 的时候要简单很多. 1$ npm install hexo-theme-next next支持四种样式,我个人比较喜欢Pisces,官方对这个样式的形容是fresh like your neighbor&#39;s daughter,很有趣. 关于主题的 _config.next.yml 文件hexo5以后支持在根目录下创建一个_config.next.yml文件,在这个文件里面直接配置主题的参数而不是在主题包下面的_config.yml下,方便更新,和主题包的更新分离. 自动编译可以采用github actions自动编译,这样就只用push源码到remote仓库就好了.官方教程: https://hexo.io/docs/github-pages这里有一点坑,就是注意里面_config.yml里的 deploy 属性里的 repository 链接要是https的,不然不能使用GITHUB_TOKEN .另外 仓库设置里要给GITHUB_TOKEN 读写仓库的权限,默认是只有读仓库的权限,这样触发action的时候会提示bot push失败. 自定义域名自定义域名我参考了: https://zhuanlan.zhihu.com/p/35708814直接在source文件夹下创建一个CNAME文件即可,文件内容就是你自己的的域名.然后去域名配置的网站新建一个CNAME解析,比如我是将blog子域名解析到touxiaoling.github.io.等待几分钟就可以了. tag 显示参考了: https://linlif.github.io/2017/05/27/Hexo使用攻略-添加分类及标签/没什么太需要注意的,跟着敲就好了. 站点地图参考了: https://eericzeng.github.io/2019/07/14/hexo博客站点sitemap的使用/ 添加评论查询了一些发现还是比较麻烦不怎么优雅,要插入一些第三方的服务才能实现,那这样还是等网站打算折腾个后端以后再去做吧. 图床博文难免会有插入图片的需求最简单的方式就是将图片直接存到代码仓库,但是github的仓库是有体积限制的,小的时候还好,等图片多了就会非常尴尬了.而且每次pull代码的时候都会把图片pull下来,体积会非常的大.那图床自然是一个难免的存在.这里我们使用github的另一个仓库作为图床,然后通过cnd加速访问.这里参考了这位大佬的博文,各位也可以去看下. 后记持续更新中.","categories":[],"tags":[{"name":"next","slug":"next","permalink":"https://blog.thetomin.com/tags/next/"},{"name":"hexo","slug":"hexo","permalink":"https://blog.thetomin.com/tags/hexo/"}]}],"categories":[],"tags":[{"name":"群晖","slug":"群晖","permalink":"https://blog.thetomin.com/tags/%E7%BE%A4%E6%99%96/"},{"name":"TrueNAS SCALE","slug":"TrueNAS-SCALE","permalink":"https://blog.thetomin.com/tags/TrueNAS-SCALE/"},{"name":"TTRSS","slug":"TTRSS","permalink":"https://blog.thetomin.com/tags/TTRSS/"},{"name":"docker","slug":"docker","permalink":"https://blog.thetomin.com/tags/docker/"},{"name":"RSSHub","slug":"RSSHub","permalink":"https://blog.thetomin.com/tags/RSSHub/"},{"name":"Nginx","slug":"Nginx","permalink":"https://blog.thetomin.com/tags/Nginx/"},{"name":"frp","slug":"frp","permalink":"https://blog.thetomin.com/tags/frp/"},{"name":"https","slug":"https","permalink":"https://blog.thetomin.com/tags/https/"},{"name":"watchtower","slug":"watchtower","permalink":"https://blog.thetomin.com/tags/watchtower/"},{"name":"next","slug":"next","permalink":"https://blog.thetomin.com/tags/next/"},{"name":"hexo","slug":"hexo","permalink":"https://blog.thetomin.com/tags/hexo/"}]}