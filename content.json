{"meta":{"title":"tomin的个人博客","subtitle":"","description":"tomin的个人博客","author":"tomin","url":"https://blog.thetomin.com","root":"/"},"pages":[{"title":"about","date":"2022-05-11T20:46:58.000Z","updated":"2022-05-13T09:46:18.197Z","comments":true,"path":"about/index.html","permalink":"https://blog.thetomin.com/about/index.html","excerpt":"","text":""},{"title":"categories","date":"2022-05-11T21:12:03.000Z","updated":"2022-05-13T09:46:18.197Z","comments":true,"path":"categories/index.html","permalink":"https://blog.thetomin.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2022-05-11T20:47:13.000Z","updated":"2022-05-13T09:46:18.197Z","comments":true,"path":"tags/index.html","permalink":"https://blog.thetomin.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"在群晖中使用docker搭建TTRSS+RSSHub并启用https","slug":"TTRSS搭建","date":"2022-05-13T07:41:48.000Z","updated":"2022-05-13T09:46:18.197Z","comments":true,"path":"2022/05/13/TTRSS搭建/","link":"","permalink":"https://blog.thetomin.com/2022/05/13/TTRSS%E6%90%AD%E5%BB%BA/","excerpt":"前言目前个人获取信息的方式十分的平台化,而每个平台基本上又都是以使用时间为条件给你推荐各种东西,比如奶子啊奶子啊还有奶子啊什么的,搞得我身体很不好.开玩笑,rss可以让我们主动从各个平台获取信息而不被绑架自己的视野,这非常有用.比如b站不会给你推荐抖音上的东西,抖音也不会给你推荐其他平台上的东西,其他平台还有v2ex,知乎,微博,大家因为常用平台不一样看到的东西也非常的不一样.但是跨平台的浏览不得不说又十分的麻烦.还有就是不同平台的排行榜都是处于自己利益定制的,另外还有一些不能在国内轻易访问的网站(非情色),如果想抓取不同平台的热门内容还有你想关注的内容,RSS就是一个非常棒的一站式工具.当然,只是收集强时间相关的信息上来说.不过很尴尬的是,目前并没有一个可以说特别好用的RSS平台,TTRSS相对来说是比较不错的一个,但用了一阵以后发现启动速度相对来说还是比较慢.嘛,怎么说,只能交给时间解决了.","text":"前言目前个人获取信息的方式十分的平台化,而每个平台基本上又都是以使用时间为条件给你推荐各种东西,比如奶子啊奶子啊还有奶子啊什么的,搞得我身体很不好.开玩笑,rss可以让我们主动从各个平台获取信息而不被绑架自己的视野,这非常有用.比如b站不会给你推荐抖音上的东西,抖音也不会给你推荐其他平台上的东西,其他平台还有v2ex,知乎,微博,大家因为常用平台不一样看到的东西也非常的不一样.但是跨平台的浏览不得不说又十分的麻烦.还有就是不同平台的排行榜都是处于自己利益定制的,另外还有一些不能在国内轻易访问的网站(非情色),如果想抓取不同平台的热门内容还有你想关注的内容,RSS就是一个非常棒的一站式工具.当然,只是收集强时间相关的信息上来说.不过很尴尬的是,目前并没有一个可以说特别好用的RSS平台,TTRSS相对来说是比较不错的一个,但用了一阵以后发现启动速度相对来说还是比较慢.嘛,怎么说,只能交给时间解决了. 前置知识前置需要了解一些关于docker以及docker-compose的基本知识和基本命令.docker在群晖的安装很简单,只要在套件库里面搜索docker然后安装上就可以了.其它系统的安装见官方页:https://docs.docker.com/get-docker/我是在自己的黑群晖小机器里搭建的.docker版本是20.10.3,docker-compose 版本是1.28.5,注意docker-compose版本最好大于1.17,不然会有点bug. 搭建ttrsss新建一个名叫ttrss的文件夹,然后在里面新建一个名叫docker-compose.yml的文件. 123mkdir ttrsscd ttrsstouch docker-compose.yml 然后在该文件中写入如下内容: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768services: service.rss: image: wangqiru/ttrss:latest container_name: ttrss labels: com.centurylinklabs.watchtower.enable: true environment: SELF_URL_PATH: http://机器ip:31480 # please change to your own domain DB_PASS: ttrss # use the same password defined in `database.postgres` PUID: 1026 PGID: 100 ports: - 31480:80 volumes: - feed-icons:/var/www/feed-icons/ networks: - public_access - service_only - database_only stdin_open: true tty: true depends_on: - service.mercury - service.opencc - database.postgres restart: always service.mercury: # set Mercury Parser API endpoint to `service.mercury:3000` on TTRSS plugin setting page image: wangqiru/mercury-parser-api:latest labels: com.centurylinklabs.watchtower.enable: true networks: - public_access - service_only restart: always service.opencc: # set OpenCC API endpoint to `service.opencc:3000` on TTRSS plugin setting page image: wangqiru/opencc-api-server:latest labels: com.centurylinklabs.watchtower.enable: true environment: NODE_ENV: production networks: - service_only restart: always database.postgres: image: postgres:13-alpine labels: com.centurylinklabs.watchtower.enable: true environment: - POSTGRES_PASSWORD=ttrss # feel free to change the password volumes: - postgres-data:/var/lib/postgresql/data # persist postgres data to ~/postgres/data/ on the host networks: - database_only restart: alwaysvolumes: feed-icons: postgres-data:networks: public_access: # Provide the access for ttrss UI service_only: # Provide the communication network between services only internal: true database_only: # Provide the communication between ttrss and database only internal: true 注意,SELF_URL_PATH 处要填写你启动docker机器的ip,PUID和PGID是docker容器的用户id和组id,这个如果填错了好像也不会怎么样,只要你是用的创建的虚拟卷.在命令行使用docker-compose up -d启动docker-compose容器.然后在浏览器中访问 http:&#x2F;&#x2F;机器ip:31480 就可以看到你的ttrss网站了. 搭建rsshubrsshub的官方网站是: https://docs.rsshub.app/ , 可以给各种各样的网站生成rss订阅源.帮助我们实现跨平台订阅的想法.你可以直接使用在线的rsshub订阅源来访问一些反爬不是特别严格的网站,但某些反爬严格比如微博某个博主的更新,就最好是自建RSSHub服务了.不过搭建也很简单,我们直接在刚才的docker-compose.yml文件中增加一些关于rsshub的内容即可. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108services: service.rss: image: wangqiru/ttrss:latest container_name: ttrss labels: com.centurylinklabs.watchtower.enable: true environment: SELF_URL_PATH: http://机器ip:31480 # please change to your own domain DB_PASS: ttrss # use the same password defined in `database.postgres` PUID: 1026 PGID: 100 ports: - 31480:80 volumes: - feed-icons:/var/www/feed-icons/ networks: - public_access - service_only - database_only stdin_open: true tty: true depends_on: - rsshub - service.mercury - service.opencc - database.postgres restart: always service.mercury: # set Mercury Parser API endpoint to `service.mercury:3000` on TTRSS plugin setting page image: wangqiru/mercury-parser-api:latest labels: com.centurylinklabs.watchtower.enable: true networks: - public_access - service_only restart: always service.opencc: # set OpenCC API endpoint to `service.opencc:3000` on TTRSS plugin setting page image: wangqiru/opencc-api-server:latest labels: com.centurylinklabs.watchtower.enable: true environment: NODE_ENV: production networks: - service_only restart: always rsshub: image: diygod/rsshub restart: always labels: com.centurylinklabs.watchtower.enable: true environment: PORT: 80 NODE_ENV: production CACHE_TYPE: redis REDIS_URL: &#x27;redis://database.redis:6379/&#x27; PUPPETEER_WS_ENDPOINT: &#x27;ws://service.browserless:3000&#x27; networks: - public_access - database_only depends_on: - database.redis - service.browserless service.browserless: image: browserless/chrome labels: com.centurylinklabs.watchtower.enable: true restart: always ulimits: core: hard: 0 soft: 0 database.redis: image: redis:alpine restart: always labels: com.centurylinklabs.watchtower.enable: true volumes: - redis-data:/data networks: - database_only database.postgres: image: postgres:13-alpine labels: com.centurylinklabs.watchtower.enable: true environment: - POSTGRES_PASSWORD=ttrss # feel free to change the password volumes: - postgres-data:/var/lib/postgresql/data # persist postgres data to ~/postgres/data/ on the host networks: - database_only restart: alwaysvolumes: feed-icons: redis-data: postgres-data:networks: public_access: # Provide the access for ttrss UI service_only: # Provide the communication network between services only internal: true database_only: # Provide the communication between ttrss and database only internal: true 然后运行docker-compose up -d即可.因为都在同一个compose文件,也在同一个public_access网络下,所以ttrss可以使用rsshub做域名直接解析到rsshub的ip.想要在ttrss中订阅rsshub的链接,比如b站番剧就是 http://rsshub/bilibili/bangumi/media/9192更详细的文档可以看https://docs.rsshub.app/ 配置watchtower自动更新如果使用本地的RSSHub服务,有一个小问题是它经常更新…,如果手动来的话会很麻烦,所以我们可以使用watchtower来监控他们进行自动更新.我们再新建一个叫watchtower的文件夹,然后在里面再创建一个docker-compose.yml文件 123mkdir rsshubcd rsshubtouch docker-compose.yml 然后在里面写如下内容: 12345678910111213version: &quot;3.8&quot;services: watchtower: image: containrrr/watchtower:latest container_name: watchtower restart: always environment: TZ: Asia/Shanghai WATCHTOWER_LABEL_ENABLE: &quot;true&quot; WATCHTOWER_CLEANUP: &quot;true&quot; WATCHTOWER_SCHEDULE: &quot;0 30 4 * * *&quot; volumes: - /var/run/docker.sock:/var/run/docker.sock 然后运行docker-compose up -d即可启动一个wathtower容器,它会在每天4.30检测并更新容器.如果不经过一些其他特殊配置,watchtower容器一个宿主机只能运行一个,多个会相互冲突.不过一般来说一个就足够了.如果你还有其他docker container 在运行也希望一并检测的话,给对应的容器增加一个com.centurylinklabs.watchtower.enable: true的label即可. 申请https证书,并使用nginx启用httpsttrss默认是使用http访问的,而现在的chrome浏览器不建议http访问,所以我们可以申请一个https证书,使用nginx将http转成https再访问ttrss.如果要启用https,首先我们需要一个个人的域名,在国内买的话需要备案,如果不想要备案的话也可以在一些国外的比如godaddy上注册一个域名.价格应该不会特别贵.如果是在不想买的话就要考虑一些骚操作,不过我还是建议花钱买省心.有一个个人域名会方便很多.下面我就假设你已经有个一个域名,接下来就是神奇一个https证书.证书的申请可以使用acme.sh,这个是一个自动申请免费证书的工具,还可以检测快到期自动重新申请.我们再新建一个叫acme.sh的文件夹,然后在里面再创建一个docker-compose.yml文件和一个名叫out的文件夹. 1234mkdir acme.shcd acme.shmkdir outtouch docker-compose.yml 然后在里面写如下内容: 12345678910111213141516version: &quot;3.8&quot;services: acme.sh: image: neilpang/acme.sh:latest container_name: acme.sh restart: always labels: com.centurylinklabs.watchtower.enable: true environment: GD_Secret: MYSELF_PRIVETE_SECRET GD_Key: MYSELF_PRIVETE_KEY volumes: - /var/run/docker.sock:/var/run/docker.sock - ./out:/acme.sh command: daemon 因为我是在godaddy上申请的,所以申请证书就需要填入这里的GD_Secret 和GD_Key两个内容.这两个值可以在godaddy的开发者网站上申请.网址是: https:&#x2F;&#x2F;这里有一个网址等待补全.com&#x2F;使用docker-compose up -d即可启动acme.sh容器,它会在后台检测你已经申请的证书是否到期并续期.然后注册一个账号 1sudo docker exec acme.sh --register-account -m youremail@mail.com 注意youremail@mail.com是填你自己的邮箱地址.然后敲下面的命令开始申请证书,注意yourdomain.com是填你要申请证书的域名,请确保这个域名你自己是拥有者. 1sudo docker exec acme.sh --issue --dns dns_gd -d yourdomain.com 这个命令会申请一个证书,并且把它保存到/acme.sh/out/yourdomain.com目录下.不过我们不会直接操作out目录下的内容.也不会去手动copy它,这样他不会自动更新.接下来我们创建一个ngnix容器.在ttrss的docker-compose.yml文件中,我们增加一些内容: 1等待补全 暴露到公网访问这样我们就可以在本地的局域网愉快的使用ttrss了.不过如果出门怎么办呢,rss非常适合在坐地铁的使用使用不是吗?只能在家用也太不方便了.所以我们要将tttrss暴露到公网,前一步的启用https也是为了增加暴漏到公网的安全性.这一步我们需要有一个固定的公网ip地址,或者DDNS,不过家用ip启动web服务是违法的,如果不备案的话我推荐是购买一个云服务器(国外),以及国外域名,这样会省很多事,不然还是乖乖备案叭.","categories":[],"tags":[{"name":"TTRSS","slug":"TTRSS","permalink":"https://blog.thetomin.com/tags/TTRSS/"},{"name":"docker","slug":"docker","permalink":"https://blog.thetomin.com/tags/docker/"},{"name":"RSSHub","slug":"RSSHub","permalink":"https://blog.thetomin.com/tags/RSSHub/"},{"name":"Nginx","slug":"Nginx","permalink":"https://blog.thetomin.com/tags/Nginx/"},{"name":"frp","slug":"frp","permalink":"https://blog.thetomin.com/tags/frp/"},{"name":"https","slug":"https","permalink":"https://blog.thetomin.com/tags/https/"},{"name":"群晖","slug":"群晖","permalink":"https://blog.thetomin.com/tags/%E7%BE%A4%E6%99%96/"},{"name":"watchtower","slug":"watchtower","permalink":"https://blog.thetomin.com/tags/watchtower/"}]},{"title":"你好-世界","slug":"你好-世界","date":"2022-05-11T04:37:00.000Z","updated":"2022-05-13T09:46:18.197Z","comments":true,"path":"2022/05/11/你好-世界/","link":"","permalink":"https://blog.thetomin.com/2022/05/11/%E4%BD%A0%E5%A5%BD-%E4%B8%96%E7%95%8C/","excerpt":"前言一直以来都想搭建一个博客,但是又觉的维护起来很麻烦.比如需要要服务器,需要个人域名,域名证书,网站备案等等.或者就是放在第三方博客平台上,但是发表的文章导出很麻烦,格式不够自由还要经过各种各样的审查和屏蔽.另外就是一个个人博客通常来说大部分人的都没有什么访问,缺少引流方式和个人独特性的时候,这博客基本上就自己访问简直就是自闭.自己大部分时候又是一个潜水党.种种评估下来,搭建个人博客的事情就一直搁置中.不过,时间是一个很好的东西,几年下来发现个人域名,服务器什么也都有了,在做一些个人小爱好的时候发现网上的资料也不是完全足够,免不了还是要自己踩一些小坑.这里的坑部分是因为自己的水平跟不上文章的作者,部分是因为某些工具或者框架迭代导致的过时.然后突然发现,那我也是可以写一些东西让其他人,或者同水平的朋友少踩坑的,建立博客的意义就有了. 最近在浏览其他网友的博文的时候发现有不少网友使用了hexo的框架,大致检索了下发现十分轻便,博文可以直接markdown语法,非常简单.初期可以直接搭建在github page上,启动成本很低.如果真的不错也,出于网络问题可以再迁移到国内的个人服务器上,又因为是markdown语法,跨框架迁移起来也很方便,再加上最近确实很闲,这让我动了实际搭建一个博客的行动理由.从这里大抵可以看出我是一个想的挺多不怎么愿意动手的人,因为重复折腾真的会让人回忆起来觉的很浪费生命,那这样还不如花费在一些直接收获快乐的垃圾事情上,没错,我说的就是打游戏.","text":"前言一直以来都想搭建一个博客,但是又觉的维护起来很麻烦.比如需要要服务器,需要个人域名,域名证书,网站备案等等.或者就是放在第三方博客平台上,但是发表的文章导出很麻烦,格式不够自由还要经过各种各样的审查和屏蔽.另外就是一个个人博客通常来说大部分人的都没有什么访问,缺少引流方式和个人独特性的时候,这博客基本上就自己访问简直就是自闭.自己大部分时候又是一个潜水党.种种评估下来,搭建个人博客的事情就一直搁置中.不过,时间是一个很好的东西,几年下来发现个人域名,服务器什么也都有了,在做一些个人小爱好的时候发现网上的资料也不是完全足够,免不了还是要自己踩一些小坑.这里的坑部分是因为自己的水平跟不上文章的作者,部分是因为某些工具或者框架迭代导致的过时.然后突然发现,那我也是可以写一些东西让其他人,或者同水平的朋友少踩坑的,建立博客的意义就有了. 最近在浏览其他网友的博文的时候发现有不少网友使用了hexo的框架,大致检索了下发现十分轻便,博文可以直接markdown语法,非常简单.初期可以直接搭建在github page上,启动成本很低.如果真的不错也,出于网络问题可以再迁移到国内的个人服务器上,又因为是markdown语法,跨框架迁移起来也很方便,再加上最近确实很闲,这让我动了实际搭建一个博客的行动理由.从这里大抵可以看出我是一个想的挺多不怎么愿意动手的人,因为重复折腾真的会让人回忆起来觉的很浪费生命,那这样还不如花费在一些直接收获快乐的垃圾事情上,没错,我说的就是打游戏. 搭建搭建很简单,需要一点点前端的知识,不了解的话就大致百度下应该就ok.然后照着命令敲就行了,我参考了https://tding.top/archives/7f189df5.htmlhttps://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html这两位的内容,可以实现一个博客的搭建.hexo new &quot;title-name&quot; 可以创建一个新的博客文章,然后写就完事了.注意hexo s会启动一个服务器方面本地预览,修改内容后直接F5刷新即可,不需要提前运行hexo g编译静态页面,因为会自动编译.自动部署和手动部署都要求先提前设置好_config.yml内的deploy相关配置.比如我要把编译的静态页面内容放到同仓库的gh-pages分支,就按照配置成下面的样子即可. 123456# Deployment## Docs: https://hexo.io/docs/one-command-deploymentdeploy: type: &#x27;git&#x27; repository: https://github.com/touxiaoling/touxiaoling.github.io.git # 用https或者ssh均可 branch: gh-pages 折腾再往后的折腾就是自动编译,域名自定义,theme切换,更换到个人服务器上(不过毕竟本人也不是运维.对于个人服务器的安全和稳定性其实一直都没谱),家里的nas跑了一些服务基本上一个月停电断网什么的都会有一次,感觉也不是多稳定.所以如果没有更简单的方式,也没有特别的需求可能还是会一直在github page上. 显示rss订阅参考: https://juejin.cn/post/7012255009593098254在_config.yml里添加下面的内容即可: 123456789101112plugins: hexo-generate-feed​# rss配置feed: type: atom path: atom.xml limit: 20 hub: content: content_limit: 140 content_limit_delim: &#x27; &#x27; order_by: -date 更换主题主题更换到next,链接是: https://github.com/theme-next/hexo-theme-next推荐使用npm安装,这样后面切换github action 的时候要简单很多. 1$ npm install hexo-theme-next next支持四种样式,我个人比较喜欢Pisces,官方对这个样式的形容是fresh like your neighbor&#39;s daughter,很有趣. 关于主题的 _config.next.yml 文件hexo5以后支持在根目录下创建一个_config.next.yml文件,在这个文件里面直接配置主题的参数而不是在主题包下面的_config.yml下,方便更新,和主题包的更新分离. 自动编译可以采用github actions自动编译,这样就只用push源码到remote仓库就好了.官方教程: https://hexo.io/docs/github-pages这里有一点坑,就是注意里面_config.yml里的 deploy 属性里的 repository 链接要是https的,不然不能使用GITHUB_TOKEN .另外 仓库设置里要给GITHUB_TOKEN 读写仓库的权限,默认是只有读仓库的权限,这样触发action的时候会提示bot push失败. 自定义域名自定义域名我参考了: https://zhuanlan.zhihu.com/p/35708814直接在source文件夹下创建一个CNAME文件即可,文件内容就是你自己的的域名.然后去域名配置的网站新建一个CNAME解析,比如我是将blog子域名解析到touxiaoling.github.io.等待几分钟就可以了. tag 显示参考了: https://linlif.github.io/2017/05/27/Hexo使用攻略-添加分类及标签/没什么太需要注意的,跟着敲就好了. 站点地图参考了: https://eericzeng.github.io/2019/07/14/hexo博客站点sitemap的使用/ 添加评论后记oh,对了,还有就是刚刚预览了下博客,发现rss链接什么不正常返回,应该是_config.yml里面的url设置有问题.","categories":[],"tags":[{"name":"next","slug":"next","permalink":"https://blog.thetomin.com/tags/next/"},{"name":"hexo","slug":"hexo","permalink":"https://blog.thetomin.com/tags/hexo/"}]}],"categories":[],"tags":[{"name":"TTRSS","slug":"TTRSS","permalink":"https://blog.thetomin.com/tags/TTRSS/"},{"name":"docker","slug":"docker","permalink":"https://blog.thetomin.com/tags/docker/"},{"name":"RSSHub","slug":"RSSHub","permalink":"https://blog.thetomin.com/tags/RSSHub/"},{"name":"Nginx","slug":"Nginx","permalink":"https://blog.thetomin.com/tags/Nginx/"},{"name":"frp","slug":"frp","permalink":"https://blog.thetomin.com/tags/frp/"},{"name":"https","slug":"https","permalink":"https://blog.thetomin.com/tags/https/"},{"name":"群晖","slug":"群晖","permalink":"https://blog.thetomin.com/tags/%E7%BE%A4%E6%99%96/"},{"name":"watchtower","slug":"watchtower","permalink":"https://blog.thetomin.com/tags/watchtower/"},{"name":"next","slug":"next","permalink":"https://blog.thetomin.com/tags/next/"},{"name":"hexo","slug":"hexo","permalink":"https://blog.thetomin.com/tags/hexo/"}]}